name: JAVA Application Deployment
on:
  push:
    branches: [master, feature/*]
    tags:
      - 'deploy-*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ec2_deployment
    
    env:
      ACCESS_KEY_VALUE: ${{ secrets.ACCESS_KEY_VALUE }}
      SECRET_KEY_VALUE: ${{ secrets.SECRET_KEY_VALUE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      EC2_KEY_PAIR: ${{ secrets.EC2_KEY_PAIR }}
      EC2_USER: ${{ secrets.EC2_USER }}
      BUCKET_NAME: ${{ secrets.BUCKET_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set stage from tag
      if: startsWith(github.ref, 'refs/tags/deploy-')
      run: echo "TF_VAR_stage=${GITHUB_REF#refs/tags/deploy-}" >> $GITHUB_ENV

    - name: Install Terraform
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip
        curl -LO "https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip"
        unzip terraform_1.5.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version

    - name: Validate Secrets
      run: |
        if [ -z "${{ env.AWS_REGION }}" ]; then
          echo "Error: AWS_REGION secret is not set."
          exit 1
        fi
        if [ -z "${{ secrets.ACCESS_KEY_VALUE }}" ]; then
          echo "Error: ACCESS_KEY_VALUE secret is not set."
          exit 1
        fi
        if [ -z "${{ secrets.SECRET_KEY_VALUE }}" ]; then
          echo "Error: SECRET_KEY_VALUE secret is not set."
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_VALUE }}
        aws-secret-access-key: ${{ secrets.SECRET_KEY_VALUE }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Initialize Terraform
      run: terraform init

    - name: Terraform apply
      run: terraform apply -auto-approve -var-file=config/${{env.TF_VAR_stage}}_config.tfvars

    - name: Get EC2 Public IP
      id: ec2_ip
      run: echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

    - name: add SSH key to the agent
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > id_rsa
        chmod 600 id_rsa
      
    - name: SSH and Run Setup Script
      run: |
        scp -o StrictHostKeyChecking=no -i id_rsa scripts/setup.sh ${{ secrets.EC2_USER }}@${{ env.EC2_IP }}:/tmp/setup.sh
        ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.EC2_USER }}@${{ env.EC2_IP }} "bash /tmp/setup.sh"

    - name: Health Check
      run: |
        for i in {1..10}; do
          if curl -s --head http://${{ env.EC2_IP }} | grep "200 OK"; then
            echo "App running..."
            exit 0
          fi
          echo "Waiting..."
          sleep 5
        done
        echo "App running status failed..."
        exit 1

    - name: upload logs to S3
      run: |
        echo "Deployment complete for ${{ env.TF_VAR_stage }} at $(date)" > deploy.log
        aws s3 cp deploy.log s3://${{ env.BUCKET_NAME }}/${{ env.TF_VAR_stage }}/



