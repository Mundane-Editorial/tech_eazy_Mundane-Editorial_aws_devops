name: JAVA Application Deployment
on:
  push:
    branches: [master, feature/*]
    tags: ['deploy-*']
  workflow_dispatch:

jobs:
  deploy:
    environment: ${{ env.STAGE }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ec2_deployment

    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      EC2_USER: ${{ vars.INSTANCE_USER }}
      AMI_ID: ${{ vars.AMI_ID }}
      INSTANCE_TYPE: ${{ vars.INSTANCE_TYPE }}
      JAVA_VERSION: ${{ vars.JAVA_VERSION }}
      REPO_URL: ${{ vars.REPO_URL }}
      SHUTDOWN_THRESHOLD: ${{ vars.SHUTDOWN_THRESHOLD }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set TF_VAR_stage from tag or branch
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/deploy-* ]]; then
          STAGE="${GITHUB_REF#refs/tags/deploy-}"
        elif [[ "${GITHUB_REF}" == refs/heads/* ]]; then
          STAGE=$(basename "${GITHUB_REF}")
        else
          STAGE="dev"
        fi
        echo "TF_VAR_stage=$STAGE" >> $GITHUB_ENV
        echo "STAGE=$STAGE" >> $GITHUB_ENV

    - name: Install Terraform
      run: |
        curl -LO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
        unzip terraform_1.5.7_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_VALUE }}
        aws-secret-access-key: ${{ secrets.SECRET_KEY_VALUE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply (with fallback destroy on fail)
      id: apply
      continue-on-error: true
      env:
        TF_VAR_access_key_value: ${{ secrets.ACCESS_KEY_VALUE }}
        TF_VAR_secret_key_value: ${{ secrets.SECRET_KEY_VALUE }}
        TF_VAR_ec2_private_key: ${{ secrets.EC2_PRIVATE_KEY }}
        TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
      run: terraform apply -auto-approve -var-file=config/dev_config.tfvars

    - name: Terraform Destroy on Failure
      if: steps.apply.outcome == 'failure'
      run: terraform destroy -auto-approve -var-file=config/dev_config.tfvars

    - name: Output EC2 IP
      if: steps.apply.outcome == 'success'
      id: ec2_ip
      run: |
        IP=$(terraform output -raw ec2_instance_ip)
        echo "EC2_IP=$IP" >> $GITHUB_ENV
        echo "Public IP: $IP"

    - name: Setup SSH Key
      if: steps.apply.outcome == 'success'
      run: |
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > id_rsa
        chmod 600 id_rsa

    - name: Wait for SSH (retry)
      if: steps.apply.outcome == 'success'
      run: |
        for i in {1..10}; do
          echo "Waiting for SSH @ $EC2_IP ..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ${{ env.EC2_USER }}@${{ env.EC2_IP }} 'echo Connected' && break
          sleep 10
        done

    - name: Upload setup.sh and execute
      if: steps.apply.outcome == 'success'
      run: |
        scp -o StrictHostKeyChecking=no -i id_rsa scripts/setup.sh ${{ env.EC2_USER }}@${{ env.EC2_IP }}:/tmp/setup.sh
        ssh -o StrictHostKeyChecking=no -i id_rsa ${{ env.EC2_USER }}@${{ env.EC2_IP }} "chmod +x /tmp/setup.sh && /tmp/setup.sh"

    - name: Health Check
      if: steps.apply.outcome == 'success'
      run: |
        for i in {1..10}; do
          if curl -s --head http://${{ env.EC2_IP }} | grep "200 OK"; then
            echo "Health check passed."
            exit 0
          fi
          echo "Retrying health check..."
          sleep 5
        done
        echo "Health check failed."
        exit 1

    - name: Upload Deployment Log
      run: |
        mkdir -p logs
        echo "Deployment log for $STAGE at $(date)" > logs/deploy.log
        aws s3 cp logs/deploy.log s3://${{ env.BUCKET_NAME }}/$STAGE/deploy-$(date +%s).log
